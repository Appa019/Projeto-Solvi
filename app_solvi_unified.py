"""
üå± Plataforma Solv√≠ - An√°lise Inteligente de Documentos
Vers√£o Masterpiece - Bizarramente parecida com o site oficial da Solv√≠
Aplica√ß√£o premium que combina an√°lise CVM e compara√ß√£o de documentos
"""

import streamlit as st
import pandas as pd
import openai
from io import BytesIO
import PyPDF2
import docx
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
import json
import time
import re
from datetime import datetime
import base64
import fitz  # PyMuPDF
import difflib
from typing import List, Tuple, Dict, Optional, Set
import logging
from pathlib import Path
import tempfile
import os

# Configura√ß√£o da p√°gina com tema Solv√≠
st.set_page_config(
    page_title="Plataforma Solv√≠ - Solu√ß√µes Inteligentes",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.solvi.com',
        'Report a bug': 'https://www.solvi.com/contato',
        'About': "Plataforma Solv√≠ - Solu√ß√µes para a vida com sustentabilidade e inova√ß√£o"
    }
)

# CSS Premium Masterpiece - Bizarramente parecido com Solv√≠
st.markdown("""
<style>
    /* Importar fontes oficiais */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap');
    
    /* Reset completo e configura√ß√µes globais */
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    
    .main .block-container {
        padding-top: 0rem;
        padding-bottom: 3rem;
        max-width: 1400px;
        padding-left: 2rem;
        padding-right: 2rem;
    }
    
    /* Ocultar elementos padr√£o do Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {visibility: hidden;}
    
    /* Remover padding padr√£o do Streamlit */
    .css-18e3th9, .css-1d391kg {
        padding-top: 0rem;
    }
    
    /* Paleta de cores oficial Solv√≠ - Verde Escuro Dominante */
    :root {
        --solvi-dark-green: #0d4f1c;
        --solvi-primary-green: #1b5e20;
        --solvi-medium-green: #2e7d32;
        --solvi-light-green: #388e3c;
        --solvi-accent-green: #4caf50;
        --solvi-bright-green: #66bb6a;
        --solvi-surface: #f1f8e9;
        --solvi-background: #e8f5e8;
        --solvi-white: #ffffff;
        --solvi-text-dark: #1b5e20;
        --solvi-text-light: #ffffff;
        --solvi-shadow: rgba(13, 79, 28, 0.15);
        --solvi-shadow-strong: rgba(13, 79, 28, 0.25);
        --solvi-gradient-primary: linear-gradient(135deg, var(--solvi-dark-green) 0%, var(--solvi-primary-green) 30%, var(--solvi-medium-green) 70%, var(--solvi-light-green) 100%);
        --solvi-gradient-surface: linear-gradient(135deg, var(--solvi-white) 0%, var(--solvi-surface) 50%, var(--solvi-background) 100%);
    }
    
    /* Header Masterpiece - Largura total e impacto visual m√°ximo */
    .solvi-header {
        background: var(--solvi-gradient-primary);
        color: var(--solvi-text-light);
        padding: 3rem 0;
        border-radius: 0;
        margin: -2rem calc(-50vw + 50%) 3rem calc(-50vw + 50%);
        box-shadow: 0 12px 40px var(--solvi-shadow-strong);
        position: relative;
        overflow: hidden;
        min-height: 200px;
        width: 100vw;
        z-index: 10;
    }
    
    .solvi-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&q=80');
        background-size: cover;
        background-position: center;
        opacity: 0.08;
        z-index: 0;
    }
    
    .solvi-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: linear-gradient(90deg, 
            var(--solvi-bright-green) 0%, 
            var(--solvi-accent-green) 25%, 
            var(--solvi-light-green) 50%, 
            var(--solvi-medium-green) 75%, 
            var(--solvi-primary-green) 100%);
        z-index: 1;
    }
    
    .solvi-header-content {
        position: relative;
        z-index: 2;
        display: flex;
        align-items: center;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 2.5rem;
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 3rem;
    }
    
    .solvi-logo-section {
        display: flex;
        align-items: center;
        gap: 2.5rem;
        flex: 1;
    }
    
    /* Logo Premium com Background Verde Escuro */
    .solvi-logo {
        height: 80px;
        width: auto;
        background: var(--solvi-dark-green);
        padding: 15px 25px;
        border-radius: 16px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.2);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        border: 4px solid var(--solvi-primary-green);
        filter: brightness(1.1);
    }
    
    .solvi-logo:hover {
        transform: scale(1.08) rotate(2deg);
        box-shadow: 0 12px 40px rgba(0,0,0,0.3);
        background: var(--solvi-primary-green);
        border-color: var(--solvi-medium-green);
        filter: brightness(1.2);
    }
    
    .solvi-title-section {
        flex: 2;
    }
    
    .solvi-title {
        font-size: 3.5rem;
        font-weight: 900;
        font-family: 'Poppins', sans-serif;
        margin: 0;
        text-shadow: 3px 3px 12px rgba(0,0,0,0.4);
        letter-spacing: -2px;
        line-height: 1;
        background: linear-gradient(45deg, #ffffff 0%, #f0f8ff 50%, #ffffff 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .solvi-subtitle {
        font-size: 1.4rem;
        opacity: 0.95;
        margin-top: 0.8rem;
        font-weight: 600;
        letter-spacing: 0.8px;
        text-shadow: 2px 2px 6px rgba(0,0,0,0.3);
        font-family: 'Inter', sans-serif;
    }
    
    .solvi-badge {
        background: rgba(255,255,255,0.15);
        padding: 1.5rem 3rem;
        border-radius: 50px;
        font-size: 1.2rem;
        font-weight: 800;
        backdrop-filter: blur(20px);
        border: 3px solid rgba(255,255,255,0.25);
        text-transform: uppercase;
        letter-spacing: 2px;
        box-shadow: 0 6px 25px rgba(0,0,0,0.15);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        font-family: 'Poppins', sans-serif;
        white-space: nowrap;
    }
    
    .solvi-badge:hover {
        background: rgba(255,255,255,0.25);
        transform: translateY(-3px) scale(1.05);
        box-shadow: 0 10px 35px rgba(0,0,0,0.2);
        border-color: rgba(255,255,255,0.4);
    }
    
    /* Se√ß√£o de imagens inspiracionais premium */
    .solvi-inspiration {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2.5rem;
        margin: 4rem 0;
        padding: 3rem;
        background: var(--solvi-gradient-surface);
        border-radius: 28px;
        border: 3px solid var(--solvi-light-green);
        box-shadow: 0 12px 40px var(--solvi-shadow);
        position: relative;
        overflow: hidden;
    }
    
    .solvi-inspiration::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 6px;
        background: var(--solvi-gradient-primary);
        z-index: 1;
    }
    
    .solvi-inspiration-item {
        position: relative;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 35px var(--solvi-shadow);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        background: var(--solvi-white);
        border: 3px solid var(--solvi-background);
        transform-origin: center;
    }
    
    .solvi-inspiration-item:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: 0 20px 60px var(--solvi-shadow-strong);
        border-color: var(--solvi-light-green);
    }
    
    .solvi-inspiration-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 20px 20px 0 0;
        transition: all 0.4s ease;
    }
    
    .solvi-inspiration-item:hover .solvi-inspiration-image {
        transform: scale(1.05);
        filter: brightness(1.1) saturate(1.2);
    }
    
    .solvi-inspiration-content {
        padding: 2.5rem;
        background: var(--solvi-gradient-surface);
        position: relative;
    }
    
    .solvi-inspiration-title {
        font-size: 1.4rem;
        font-weight: 800;
        color: var(--solvi-text-dark);
        margin: 0 0 1.2rem 0;
        font-family: 'Poppins', sans-serif;
        letter-spacing: -0.5px;
    }
    
    .solvi-inspiration-desc {
        font-size: 1.05rem;
        color: #555;
        line-height: 1.7;
        margin: 0;
        font-weight: 500;
        font-family: 'Inter', sans-serif;
    }
    
    /* Navega√ß√£o premium estilo Solv√≠ */
    .solvi-navigation {
        background: var(--solvi-gradient-surface);
        border-radius: 24px;
        padding: 2rem;
        margin: 4rem 0;
        box-shadow: 0 12px 45px var(--solvi-shadow);
        border: 3px solid var(--solvi-background);
        position: relative;
        overflow: hidden;
    }
    
    .solvi-navigation::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 6px;
        background: var(--solvi-gradient-primary);
        z-index: 1;
    }
    
    /* Cards premium estilo Solv√≠ */
    .solvi-card {
        background: var(--solvi-gradient-surface);
        border-radius: 28px;
        padding: 3.5rem;
        margin: 3rem 0;
        box-shadow: 0 20px 60px var(--solvi-shadow);
        border: 3px solid var(--solvi-background);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .solvi-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: var(--solvi-gradient-primary);
        z-index: 1;
    }
    
    .solvi-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 30px 80px var(--solvi-shadow-strong);
        border-color: var(--solvi-light-green);
    }
    
    .solvi-card-header {
        display: flex;
        align-items: center;
        margin-bottom: 3rem;
        padding-bottom: 2.5rem;
        border-bottom: 4px solid var(--solvi-background);
        position: relative;
    }
    
    .solvi-card-icon {
        width: 80px;
        height: 80px;
        background: var(--solvi-gradient-primary);
        border-radius: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 2.5rem;
        font-size: 2.5rem;
        box-shadow: 0 10px 30px var(--solvi-shadow);
        border: 4px solid var(--solvi-white);
        transition: all 0.3s ease;
    }
    
    .solvi-card-icon:hover {
        transform: scale(1.1) rotate(5deg);
        box-shadow: 0 15px 40px var(--solvi-shadow-strong);
    }
    
    .solvi-card-title {
        font-size: 2.2rem;
        font-weight: 900;
        color: var(--solvi-text-dark);
        margin: 0;
        font-family: 'Poppins', sans-serif;
        letter-spacing: -1px;
        line-height: 1.2;
    }
    
    /* M√©tricas premium estilo Solv√≠ */
    .solvi-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        gap: 3rem;
        margin: 4rem 0;
    }
    
    .solvi-metric {
        background: var(--solvi-gradient-surface);
        border-radius: 28px;
        padding: 3.5rem;
        text-align: center;
        border: 3px solid var(--solvi-background);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        box-shadow: 0 15px 50px var(--solvi-shadow);
    }
    
    .solvi-metric::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 8px;
        background: var(--solvi-gradient-primary);
        z-index: 1;
    }
    
    .solvi-metric:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: 0 25px 70px var(--solvi-shadow-strong);
        border-color: var(--solvi-light-green);
    }
    
    .solvi-metric-value {
        font-size: 4.5rem;
        font-weight: 900;
        color: var(--solvi-primary-green);
        margin-bottom: 1.5rem;
        font-family: 'Poppins', sans-serif;
        line-height: 1;
        text-shadow: 3px 3px 6px rgba(0,0,0,0.1);
        background: var(--solvi-gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .solvi-metric-label {
        color: #555;
        font-size: 1.2rem;
        font-weight: 800;
        text-transform: uppercase;
        letter-spacing: 2px;
        font-family: 'Inter', sans-serif;
    }
    
    /* Bot√µes premium estilo Solv√≠ */
    .stButton > button {
        background: var(--solvi-gradient-primary);
        color: var(--solvi-text-light);
        border: none;
        border-radius: 24px;
        padding: 1.8rem 4rem;
        font-weight: 800;
        font-size: 1.3rem;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 10px 30px var(--solvi-shadow);
        font-family: 'Poppins', sans-serif;
        letter-spacing: 1.5px;
        text-transform: uppercase;
        border: 4px solid transparent;
        position: relative;
        overflow: hidden;
    }
    
    .stButton > button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }
    
    .stButton > button:hover::before {
        left: 100%;
    }
    
    .stButton > button:hover {
        transform: translateY(-6px) scale(1.02);
        box-shadow: 0 15px 50px var(--solvi-shadow-strong);
        background: linear-gradient(135deg, var(--solvi-dark-green) 0%, var(--solvi-primary-green) 50%, var(--solvi-medium-green) 100%);
        border-color: var(--solvi-white);
    }
    
    /* Alertas premium estilo Solv√≠ */
    .solvi-alert {
        border-radius: 24px;
        padding: 3rem 3.5rem;
        margin: 3rem 0;
        border-left: 10px solid;
        font-weight: 600;
        font-family: 'Inter', sans-serif;
        position: relative;
        overflow: hidden;
        box-shadow: 0 12px 40px rgba(0,0,0,0.1);
        font-size: 1.15rem;
        line-height: 1.6;
    }
    
    .solvi-alert.success {
        background: var(--solvi-gradient-surface);
        border-color: var(--solvi-accent-green);
        color: var(--solvi-text-dark);
    }
    
    .solvi-alert.warning {
        background: linear-gradient(135deg, #fff8e1 0%, #fffde7 50%, #f9fbe7 100%);
        border-color: #ff9800;
        color: #e65100;
    }
    
    .solvi-alert.error {
        background: linear-gradient(135deg, #ffebee 0%, #fce4ec 50%, #f3e5f5 100%);
        border-color: #f44336;
        color: #c62828;
    }
    
    .solvi-alert.info {
        background: linear-gradient(135deg, #e3f2fd 0%, #e1f5fe 50%, #e0f2f1 100%);
        border-color: #2196f3;
        color: #0d47a1;
    }
    
    /* Upload areas premium com pontilhado cont√≠nuo */
    .solvi-upload {
        border: 5px dashed var(--solvi-light-green);
        border-radius: 28px;
        padding: 5rem 4rem;
        text-align: center;
        background: var(--solvi-gradient-surface);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        margin: 3rem 0;
        box-shadow: 0 15px 50px var(--solvi-shadow);
        position: relative;
        overflow: hidden;
    }
    
    /* Pontilhado cont√≠nuo animado premium */
    .solvi-upload::before {
        content: '';
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        border: 5px dashed var(--solvi-primary-green);
        border-radius: 28px;
        animation: dash 25s linear infinite;
        opacity: 0.7;
        z-index: 0;
    }
    
    @keyframes dash {
        0% {
            stroke-dashoffset: 0;
            transform: rotate(0deg);
        }
        100% {
            stroke-dashoffset: 50px;
            transform: rotate(360deg);
        }
    }
    
    .solvi-upload:hover {
        border-color: var(--solvi-primary-green);
        background: linear-gradient(135deg, var(--solvi-surface) 0%, var(--solvi-background) 50%, #dcedc8 100%);
        transform: translateY(-8px) scale(1.01);
        box-shadow: 0 20px 70px var(--solvi-shadow-strong);
    }
    
    .solvi-upload:hover::before {
        border-color: var(--solvi-dark-green);
        opacity: 0.9;
        animation-duration: 15s;
    }
    
    .solvi-upload-icon {
        font-size: 5rem;
        color: var(--solvi-light-green);
        margin-bottom: 2.5rem;
        text-shadow: 3px 3px 6px rgba(0,0,0,0.1);
        position: relative;
        z-index: 1;
        transition: all 0.3s ease;
    }
    
    .solvi-upload:hover .solvi-upload-icon {
        transform: scale(1.1) rotate(5deg);
        color: var(--solvi-primary-green);
    }
    
    .solvi-upload-text {
        font-size: 1.8rem;
        font-weight: 800;
        color: var(--solvi-text-dark);
        margin-bottom: 1.5rem;
        font-family: 'Poppins', sans-serif;
        position: relative;
        z-index: 1;
        letter-spacing: -0.5px;
    }
    
    .solvi-upload-subtext {
        font-size: 1.2rem;
        color: #666;
        line-height: 1.8;
        font-weight: 500;
        position: relative;
        z-index: 1;
        font-family: 'Inter', sans-serif;
    }
    
    /* Footer premium */
    .solvi-footer {
        background: var(--solvi-gradient-primary);
        color: var(--solvi-text-light);
        padding: 5rem 3rem;
        border-radius: 28px;
        margin: 5rem 0 3rem 0;
        text-align: center;
        box-shadow: 0 20px 60px var(--solvi-shadow-strong);
        position: relative;
        overflow: hidden;
    }
    
    .solvi-footer::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&q=80');
        background-size: cover;
        background-position: center;
        opacity: 0.06;
        z-index: 0;
    }
    
    .solvi-footer-content {
        position: relative;
        z-index: 1;
    }
    
    .solvi-footer-logo {
        height: 70px;
        margin-bottom: 2.5rem;
        background: var(--solvi-dark-green);
        padding: 15px 25px;
        border-radius: 16px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.3);
        border: 4px solid var(--solvi-primary-green);
        transition: all 0.3s ease;
    }
    
    .solvi-footer-logo:hover {
        transform: scale(1.05);
        box-shadow: 0 12px 35px rgba(0,0,0,0.4);
    }
    
    /* Responsividade premium */
    @media (max-width: 768px) {
        .solvi-header {
            padding: 2.5rem 0;
            min-height: 180px;
        }
        
        .solvi-header-content {
            flex-direction: column;
            text-align: center;
            gap: 2rem;
            padding: 0 1.5rem;
        }
        
        .solvi-title {
            font-size: 2.5rem;
        }
        
        .solvi-subtitle {
            font-size: 1.2rem;
        }
        
        .solvi-logo {
            height: 70px;
        }
        
        .solvi-inspiration {
            grid-template-columns: 1fr;
            padding: 2.5rem;
        }
        
        .solvi-metrics {
            grid-template-columns: 1fr;
        }
        
        .solvi-metric-value {
            font-size: 4rem;
        }
        
        .solvi-card {
            padding: 3rem;
        }
        
        .solvi-upload {
            padding: 4rem 2.5rem;
        }
        
        .solvi-badge {
            padding: 1.2rem 2.5rem;
            font-size: 1rem;
        }
    }
    
    /* Anima√ß√µes premium */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(60px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.03);
        }
    }
    
    @keyframes float {
        0%, 100% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-10px);
        }
    }
    
    .solvi-card, .solvi-metric, .solvi-inspiration-item {
        animation: fadeInUp 0.8s ease-out;
    }
    
    .solvi-logo {
        animation: pulse 5s ease-in-out infinite;
    }
    
    .solvi-badge {
        animation: float 6s ease-in-out infinite;
    }
    
    /* Scrollbar premium personalizada */
    ::-webkit-scrollbar {
        width: 14px;
    }
    
    ::-webkit-scrollbar-track {
        background: var(--solvi-surface);
        border-radius: 14px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: var(--solvi-gradient-primary);
        border-radius: 14px;
        border: 3px solid var(--solvi-surface);
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, var(--solvi-dark-green) 0%, var(--solvi-primary-green) 100%);
    }
    
    /* Efeitos especiais premium */
    .solvi-glow {
        box-shadow: 0 0 20px var(--solvi-accent-green);
    }
    
    .solvi-shimmer {
        background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.5) 50%, transparent 70%);
        background-size: 200% 200%;
        animation: shimmer 3s ease-in-out infinite;
    }
    
    @keyframes shimmer {
        0% {
            background-position: -200% -200%;
        }
        100% {
            background-position: 200% 200%;
        }
    }
</style>
""", unsafe_allow_html=True)

# Inicializar session state
def init_session_state():
    """Inicializa o estado da sess√£o com configura√ß√µes premium"""
    if 'current_tab' not in st.session_state:
        st.session_state.current_tab = 'cvm'
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = None
    if 'comparison_results' not in st.session_state:
        st.session_state.comparison_results = None
    if 'sidebar_expanded' not in st.session_state:
        st.session_state.sidebar_expanded = True

class FREAnalyzer:
    """Classe premium para an√°lise de FRE vs Normas CVM"""
    
    def __init__(self, api_key):
        openai.api_key = api_key
        self.client = openai.OpenAI(api_key=api_key)
        
    def extract_text_from_pdf(self, pdf_file):
        """Extrai texto de arquivo PDF com tratamento premium"""
        try:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do PDF: {str(e)}")
            return ""
    
    def extract_text_from_docx(self, docx_file):
        """Extrai texto de arquivo Word com tratamento premium"""
        try:
            doc = docx.Document(docx_file)
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do Word: {str(e)}")
            return ""
    
    def extract_text_from_file(self, uploaded_file):
        """Extrai texto baseado no tipo de arquivo"""
        if uploaded_file.type == "application/pdf":
            return self.extract_text_from_pdf(uploaded_file)
        elif uploaded_file.type in ["application/vnd.openxmlformats-officedocument.wordprocessingml.document", 
                                   "application/msword"]:
            return self.extract_text_from_docx(uploaded_file)
        else:
            st.error("‚ùå Formato de arquivo n√£o suportado. Use PDF ou Word.")
            return ""
    
    def analyze_fre_section(self, fre_text, cvm_references, section_name, section_content):
        """Analisa uma se√ß√£o espec√≠fica do FRE contra as normas CVM"""
        
        prompt = f"""
        Voc√™ √© um especialista premium em regulamenta√ß√£o CVM e an√°lise de Formul√°rios de Refer√™ncia (FRE).
        
        Analise a se√ß√£o "{section_name}" do FRE fornecido contra as normas e orienta√ß√µes CVM.
        
        SE√á√ÉO ANALISADA:
        {section_content[:3000]}...
        
        NORMAS CVM DE REFER√äNCIA:
        {cvm_references[:5000]}...
        
        Para esta se√ß√£o, identifique:
        
        1. CONFORMIDADE: Est√° em conformidade com as normas CVM?
        2. COMPLETUDE: Todas as informa√ß√µes obrigat√≥rias est√£o presentes?
        3. QUALIDADE: A informa√ß√£o est√° clara, objetiva e completa?
        4. PONTOS DE ATEN√á√ÉO: Identifique problemas espec√≠ficos
        5. SUGEST√ïES: Recomenda√ß√µes de melhoria com cita√ß√£o obrigat√≥ria dos artigos CVM
        
        RESPONDA EM JSON com esta estrutura:
        {{
            "secao": "{section_name}",
            "conformidade": "CONFORME/NAO_CONFORME/PARCIALMENTE_CONFORME",
            "criticidade": "CRITICO/ATENCAO/SUGESTAO",
            "pontos_atencao": [
                {{
                    "problema": "descri√ß√£o do problema",
                    "criticidade": "CRITICO/ATENCAO/SUGESTAO",
                    "artigo_cvm": "artigo espec√≠fico da norma CVM",
                    "sugestao": "recomenda√ß√£o espec√≠fica de melhoria"
                }}
            ],
            "resumo": "resumo geral da an√°lise desta se√ß√£o"
        }}
        
        IMPORTANTE: 
        - Cite OBRIGATORIAMENTE os artigos espec√≠ficos das normas CVM
        - Use criticidade CRITICO para n√£o conformidades graves
        - Use ATENCAO para informa√ß√µes incompletas
        - Use SUGESTAO para melhorias recomendadas
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.1,
                max_tokens=2000
            )
            
            result = response.choices[0].message.content
            
            # Tenta extrair JSON da resposta
            try:
                json_start = result.find('{')
                json_end = result.rfind('}') + 1
                json_str = result[json_start:json_end]
                return json.loads(json_str)
            except:
                # Se falhar, retorna estrutura padr√£o
                return {
                    "secao": section_name,
                    "conformidade": "ERRO_ANALISE",
                    "criticidade": "ATENCAO",
                    "pontos_atencao": [{
                        "problema": "Erro na an√°lise autom√°tica",
                        "criticidade": "ATENCAO",
                        "artigo_cvm": "Resolu√ß√£o CVM n¬∫ 80/22",
                        "sugestao": "Revisar manualmente esta se√ß√£o"
                    }],
                    "resumo": "Erro na an√°lise autom√°tica desta se√ß√£o"
                }
                
        except Exception as e:
            st.error(f"‚ùå Erro na an√°lise da se√ß√£o {section_name}: {str(e)}")
            return None
    
    def extract_fre_sections(self, fre_text):
        """Extrai as se√ß√µes principais do FRE"""
        sections = {}
        
        # Padr√µes para identificar se√ß√µes do FRE
        section_patterns = [
            r"1\.1\s+Hist√≥rico do emissor",
            r"1\.2\s+Descri√ß√£o das principais atividades",
            r"1\.3\s+Informa√ß√µes relacionadas aos segmentos operacionais",
            r"1\.4\s+Produ√ß√£o/Comercializa√ß√£o/Mercados",
            r"1\.5\s+Principais clientes",
            r"1\.6\s+Efeitos relevantes da regula√ß√£o estatal",
            r"1\.9\s+Informa√ß√µes ambientais sociais e de governan√ßa",
            r"2\.1\s+Condi√ß√µes financeiras e patrimoniais",
            r"2\.2\s+Resultados operacional e financeiro",
            r"4\.1\s+Descri√ß√£o dos fatores de risco",
            r"7\.1\s+Principais caracter√≠sticas dos √≥rg√£os de administra√ß√£o",
            r"8\.1\s+Pol√≠tica ou pr√°tica de remunera√ß√£o",
            r"11\.1\s+Regras, pol√≠ticas e pr√°ticas",
            r"12\.1\s+Informa√ß√µes sobre o capital social"
        ]
        
        # Divide o texto em se√ß√µes
        lines = fre_text.split('\n')
        current_section = None
        current_content = []
        
        for line in lines:
            # Verifica se a linha corresponde a uma nova se√ß√£o
            section_found = False
            for pattern in section_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    # Salva a se√ß√£o anterior se existir
                    if current_section and current_content:
                        sections[current_section] = '\n'.join(current_content)
                    
                    # Inicia nova se√ß√£o
                    current_section = line.strip()
                    current_content = [line]
                    section_found = True
                    break
            
            if not section_found and current_section:
                current_content.append(line)
        
        # Salva a √∫ltima se√ß√£o
        if current_section and current_content:
            sections[current_section] = '\n'.join(current_content)
        
        return sections

class DocumentComparator:
    """Classe premium para compara√ß√£o de documentos"""
    
    def __init__(self):
        self.texto_ref = []
        self.texto_novo = []
        self.diferencas = []
        self.diferencas_detalhadas = []
        
    def detectar_tipo_arquivo(self, nome_arquivo: str) -> str:
        """Detecta o tipo do arquivo baseado na extens√£o"""
        extensao = Path(nome_arquivo).suffix.lower()
        if extensao == '.pdf':
            return 'pdf'
        elif extensao in ['.docx', '.doc']:
            return 'word'
        else:
            return 'desconhecido'
    
    def extrair_texto_pdf(self, pdf_bytes: bytes) -> List[str]:
        """Extrai texto de cada p√°gina do PDF"""
        try:
            doc = fitz.open(stream=pdf_bytes, filetype="pdf")
            textos = []
            
            for i, pagina in enumerate(doc):
                texto = pagina.get_text()
                textos.append(texto)
            
            doc.close()
            return textos
            
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do PDF: {str(e)}")
            return []
    
    def extrair_texto_word(self, word_bytes: bytes) -> List[str]:
        """Extrai texto do documento Word"""
        try:
            # Salvar temporariamente para processar
            with tempfile.NamedTemporaryFile(delete=False, suffix='.docx') as tmp_file:
                tmp_file.write(word_bytes)
                tmp_path = tmp_file.name
            
            try:
                doc = docx.Document(tmp_path)
                
                # Para Word, vamos simular "p√°ginas" agrupando par√°grafos
                textos = []
                texto_atual = ""
                contador_paragrafos = 0
                
                for paragrafo in doc.paragraphs:
                    texto_atual += paragrafo.text + "\n"
                    contador_paragrafos += 1
                    
                    # Criar nova "p√°gina" a cada 50 par√°grafos
                    if contador_paragrafos >= 50:
                        if texto_atual.strip():
                            textos.append(texto_atual)
                            texto_atual = ""
                            contador_paragrafos = 0
                
                # Adicionar √∫ltimo texto se houver
                if texto_atual.strip():
                    textos.append(texto_atual)
                
                # Se n√£o h√° texto, criar pelo menos uma "p√°gina" vazia
                if not textos:
                    textos = [""]
                
                return textos
                
            finally:
                # Limpar arquivo tempor√°rio
                try:
                    os.unlink(tmp_path)
                except:
                    pass
                    
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do Word: {str(e)}")
            return []
    
    def normalizar_texto(self, texto: str) -> str:
        """Normaliza o texto removendo varia√ß√µes que n√£o s√£o altera√ß√µes reais"""
        # Remover espa√ßos extras e quebras de linha desnecess√°rias
        texto = re.sub(r'\s+', ' ', texto.strip())
        
        # Remover caracteres de controle e formata√ß√£o
        texto = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', texto)
        
        # Normalizar pontua√ß√£o
        texto = re.sub(r'\s+([,.;:!?])', r'\1', texto)
        
        # Normalizar aspas e caracteres especiais
        texto = re.sub(r'["""]', '"', texto)
        texto = re.sub(r"[''']", "'", texto)
        texto = re.sub(r'[‚Äì‚Äî]', '-', texto)
        
        return texto
    
    def dividir_em_paragrafos(self, texto: str) -> List[str]:
        """Divide o texto em par√°grafos de forma inteligente"""
        # Normalizar o texto primeiro
        texto = self.normalizar_texto(texto)
        
        # Dividir por quebras de linha duplas primeiro
        paragrafos_brutos = re.split(r'\n\s*\n', texto)
        paragrafos = []
        
        for paragrafo in paragrafos_brutos:
            paragrafo = paragrafo.strip()
            if paragrafo:
                # Se o par√°grafo for muito longo, dividir por frases
                if len(paragrafo) > 500:
                    frases = re.split(r'(?<!\d)\.(?!\d)\s+', paragrafo)
                    for frase in frases:
                        frase = self.normalizar_texto(frase.strip())
                        if frase and len(frase) > 10:
                            paragrafos.append(frase)
                else:
                    paragrafo_normalizado = self.normalizar_texto(paragrafo)
                    if paragrafo_normalizado and len(paragrafo_normalizado) > 10:
                        paragrafos.append(paragrafo_normalizado)
        
        return paragrafos
    
    def calcular_similaridade(self, texto1: str, texto2: str) -> float:
        """Calcula a similaridade entre dois textos"""
        if not texto1 and not texto2:
            return 1.0
        if not texto1 or not texto2:
            return 0.0
        
        texto1_norm = self.normalizar_texto(texto1)
        texto2_norm = self.normalizar_texto(texto2)
        
        matcher = difflib.SequenceMatcher(None, texto1_norm, texto2_norm)
        return matcher.ratio()
    
    def encontrar_alteracoes_reais(self, paragrafos_ref: List[str], paragrafos_novo: List[str]) -> List[Dict]:
        """Encontra apenas altera√ß√µes reais de conte√∫do"""
        alteracoes = []
        
        # Criar conjuntos de par√°grafos √∫nicos
        set_ref = set(paragrafos_ref)
        set_novo = set(paragrafos_novo)
        
        # Encontrar par√°grafos removidos e adicionados
        paragrafos_removidos = set_ref - set_novo
        paragrafos_adicionados = set_novo - set_ref
        
        # Verificar modifica√ß√µes
        paragrafos_modificados = []
        
        for p_ref in paragrafos_removidos.copy():
            melhor_match = None
            melhor_similaridade = 0.0
            
            for p_novo in paragrafos_adicionados:
                similaridade = self.calcular_similaridade(p_ref, p_novo)
                
                if similaridade > 0.6 and similaridade > melhor_similaridade:
                    melhor_match = p_novo
                    melhor_similaridade = similaridade
            
            if melhor_match and melhor_similaridade > 0.6:
                paragrafos_modificados.append({
                    'original': p_ref,
                    'novo': melhor_match,
                    'similaridade': melhor_similaridade
                })
                paragrafos_removidos.discard(p_ref)
                paragrafos_adicionados.discard(melhor_match)
        
        # Adicionar altera√ß√µes
        for paragrafo in paragrafos_removidos:
            alteracoes.append({
                'tipo': 'removido',
                'texto': paragrafo,
                'texto_original': paragrafo,
                'texto_novo': ''
            })
        
        for paragrafo in paragrafos_adicionados:
            alteracoes.append({
                'tipo': 'adicionado',
                'texto': paragrafo,
                'texto_original': '',
                'texto_novo': paragrafo
            })
        
        for mod in paragrafos_modificados:
            alteracoes.append({
                'tipo': 'modificado',
                'texto': f"ANTES: {mod['original']}\nDEPOIS: {mod['novo']}",
                'texto_original': mod['original'],
                'texto_novo': mod['novo'],
                'similaridade': mod['similaridade']
            })
        
        return alteracoes

def render_header():
    """Renderiza o header masterpiece da aplica√ß√£o"""
    st.markdown("""
    <div class="solvi-header">
        <div class="solvi-header-content">
            <div class="solvi-logo-section">
                <img src="https://static.wixstatic.com/media/b5b170_1e07cf7f7f82492a9808f9ae7f038596~mv2.png/v1/crop/x_0,y_0,w_2742,h_1106/fill/w_92,h_37,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/Logotipo%20Solv%C3%AD_edited_edited.png" alt="Solv√≠ Logo" class="solvi-logo">
                <div class="solvi-title-section">
                    <h1 class="solvi-title">Plataforma Solv√≠</h1>
                    <p class="solvi-subtitle">üå± An√°lise Inteligente de Documentos com IA</p>
                </div>
            </div>
            <div class="solvi-badge">
                Solu√ß√µes para a vida
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_inspiration_section():
    """Renderiza se√ß√£o de imagens inspiracionais premium"""
    st.markdown("""
    <div class="solvi-inspiration">
        <div class="solvi-inspiration-item">
            <img src="https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80" alt="Tecnologia Sustent√°vel" class="solvi-inspiration-image">
            <div class="solvi-inspiration-content">
                <h3 class="solvi-inspiration-title">üîã Tecnologia Sustent√°vel</h3>
                <p class="solvi-inspiration-desc">Inova√ß√£o em energia renov√°vel e solu√ß√µes tecnol√≥gicas verdes para um futuro sustent√°vel e pr√≥spero para todas as gera√ß√µes.</p>
            </div>
        </div>
        <div class="solvi-inspiration-item">
            <img src="https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80" alt="Prote√ß√£o Ambiental" class="solvi-inspiration-image">
            <div class="solvi-inspiration-content">
                <h3 class="solvi-inspiration-title">üåø Prote√ß√£o Ambiental</h3>
                <p class="solvi-inspiration-desc">Preserva√ß√£o da natureza e biodiversidade atrav√©s de pr√°ticas ambientais respons√°veis e sustent√°veis que protegem nosso planeta.</p>
            </div>
        </div>
        <div class="solvi-inspiration-item">
            <img src="https://images.unsplash.com/photo-1542601906990-b4d3fb778b09?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80" alt="Gest√£o de Res√≠duos" class="solvi-inspiration-image">
            <div class="solvi-inspiration-content">
                <h3 class="solvi-inspiration-title">‚ôªÔ∏è Gest√£o de Res√≠duos</h3>
                <p class="solvi-inspiration-desc">Solu√ß√µes inteligentes para reciclagem e economia circular, transformando res√≠duos em recursos valiosos para a sociedade.</p>
            </div>
        </div>
        <div class="solvi-inspiration-item">
            <img src="https://static.wixstatic.com/media/b5b170_b587909825174509a2a6a71af0106cc3~mv2.png/v1/fill/w_245,h_357,al_c,q_85,enc_auto/Group%2041.png" alt="Inova√ß√£o Verde" class="solvi-inspiration-image">
            <div class="solvi-inspiration-content">
                <h3 class="solvi-inspiration-title">üí° Inova√ß√£o Verde</h3>
                <p class="solvi-inspiration-desc">Desenvolvimento de tecnologias limpas e processos inovadores para sustentabilidade empresarial e crescimento respons√°vel.</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_navigation():
    """Renderiza a navega√ß√£o premium por abas"""
    st.markdown('<div class="solvi-navigation">', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Bot√£o que abre sidebar automaticamente
        if st.button("üìä An√°lise CVM", key="tab_cvm", use_container_width=True):
            st.session_state.current_tab = 'cvm'
            st.session_state.sidebar_expanded = True
            st.rerun()
    
    with col2:
        if st.button("üìö Compara√ß√£o de Documentos", key="tab_comparison", use_container_width=True):
            st.session_state.current_tab = 'comparison'
    
    st.markdown("</div>", unsafe_allow_html=True)

def render_cvm_analysis():
    """Renderiza a interface premium de an√°lise CVM"""
    st.markdown("""
    <div class="solvi-card">
        <div class="solvi-card-header">
            <div class="solvi-card-icon">üìä</div>
            <h2 class="solvi-card-title">An√°lise FRE vs Normas CVM</h2>
        </div>
        <p style="color: #666; font-size: 1.4rem; line-height: 1.8; font-weight: 500; font-family: 'Inter', sans-serif;">
            An√°lise automatizada premium de Formul√°rios de Refer√™ncia contra normas CVM com identifica√ß√£o 
            inteligente de n√£o conformidades e gera√ß√£o de relat√≥rios detalhados com base legal espec√≠fica 
            e recomenda√ß√µes de melhoria personalizadas.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar premium para configura√ß√µes
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Configura√ß√µes Premium")
        
        # Campo obrigat√≥rio para API Key
        api_key = st.text_input(
            "üîë Chave API OpenAI *",
            type="password",
            help="Insira sua chave API da OpenAI (obrigat√≥rio para an√°lise premium)"
        )
        
        if not api_key:
            st.markdown("""
            <div class="solvi-alert error">
                ‚ö†Ô∏è <strong>Chave API OpenAI √© obrigat√≥ria!</strong><br>
                Configure sua chave para utilizar a an√°lise CVM premium com IA avan√ßada.
            </div>
            """, unsafe_allow_html=True)
            return
        
        st.markdown("---")
        
        # Upload do FRE
        st.markdown("### üìÑ Arquivo FRE")
        fre_file = st.file_uploader(
            "Upload do Formul√°rio de Refer√™ncia",
            type=['pdf', 'docx'],
            help="Fa√ßa upload do FRE para an√°lise premium"
        )
        
        st.markdown("---")
        
        # Upload dos documentos CVM
        st.markdown("### üìö Documentos CVM (m√°x. 5)")
        cvm_files = st.file_uploader(
            "Upload dos documentos de refer√™ncia CVM",
            type=['pdf', 'docx'],
            accept_multiple_files=True,
            help="Fa√ßa upload dos documentos CVM para compara√ß√£o avan√ßada"
        )
        
        if len(cvm_files) > 5:
            st.error("‚ö†Ô∏è M√°ximo de 5 documentos CVM permitidos para an√°lise premium!")
            cvm_files = cvm_files[:5]
    
    # √Årea principal premium
    if not fre_file:
        st.markdown("""
        <div class="solvi-upload">
            <div class="solvi-upload-icon">üìÑ</div>
            <div class="solvi-upload-text">Como usar a An√°lise CVM Premium</div>
            <div class="solvi-upload-subtext">
                1. Configure sua API Key OpenAI na barra lateral<br>
                2. Fa√ßa upload do FRE (Formul√°rio de Refer√™ncia)<br>
                3. Adicione documentos CVM para compara√ß√£o avan√ßada<br>
                4. Execute a an√°lise premium e receba relat√≥rio detalhado<br>
                5. Baixe relat√≥rios em PDF com recomenda√ß√µes personalizadas
            </div>
        </div>
        """, unsafe_allow_html=True)
        return
    
    if not cvm_files:
        st.markdown("""
        <div class="solvi-alert warning">
            ‚ö†Ô∏è <strong>Documentos CVM necess√°rios para an√°lise premium</strong><br>
            Adicione pelo menos um documento CVM para realizar a an√°lise comparativa avan√ßada com IA.
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Informa√ß√µes premium dos arquivos carregados
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="solvi-alert success">
            ‚úÖ <strong>FRE Carregado:</strong> {fre_file.name}<br>
            üìä <strong>Tamanho:</strong> {fre_file.size / 1024 / 1024:.2f} MB<br>
            üéØ <strong>Status:</strong> Pronto para an√°lise premium
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="solvi-alert info">
            üìö <strong>Documentos CVM:</strong> {len(cvm_files)} arquivo(s)<br>
            üìä <strong>Total:</strong> {sum(f.size for f in cvm_files) / 1024 / 1024:.2f} MB<br>
            üöÄ <strong>An√°lise:</strong> IA avan√ßada habilitada
        </div>
        """, unsafe_allow_html=True)
    
    # Bot√£o de an√°lise premium
    if st.button("üîç Iniciar An√°lise CVM Premium", type="primary", use_container_width=True):
        with st.spinner("üîÑ Processando an√°lise premium com IA..."):
            try:
                # Inicializar analisador premium
                analyzer = FREAnalyzer(api_key)
                
                # Extrair texto do FRE
                fre_text = analyzer.extract_text_from_file(fre_file)
                if not fre_text:
                    st.error("‚ùå Erro ao extrair texto do FRE")
                    return
                
                # Extrair texto dos documentos CVM
                cvm_text = ""
                for cvm_file in cvm_files:
                    cvm_content = analyzer.extract_text_from_file(cvm_file)
                    cvm_text += cvm_content + "\n\n"
                
                if not cvm_text:
                    st.error("‚ùå Erro ao extrair texto dos documentos CVM")
                    return
                
                # Extrair se√ß√µes do FRE
                fre_sections = analyzer.extract_fre_sections(fre_text)
                
                if not fre_sections:
                    st.error("‚ùå N√£o foi poss√≠vel identificar se√ß√µes no FRE")
                    return
                
                # Analisar cada se√ß√£o com IA premium
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                analysis_results = []
                total_sections = len(fre_sections)
                
                for i, (section_name, section_content) in enumerate(fre_sections.items()):
                    status_text.text(f"ü§ñ Analisando com IA: {section_name}")
                    
                    result = analyzer.analyze_fre_section(
                        fre_text, cvm_text, section_name, section_content
                    )
                    
                    if result:
                        analysis_results.append(result)
                    
                    progress_bar.progress((i + 1) / total_sections)
                    time.sleep(0.5)
                
                status_text.text("‚úÖ An√°lise premium conclu√≠da com sucesso!")
                progress_bar.empty()
                status_text.empty()
                
                # Salvar resultados premium
                st.session_state.analysis_results = analysis_results
                st.session_state.fre_filename = fre_file.name
                
                st.markdown("""
                <div class="solvi-alert success">
                    ‚úÖ <strong>An√°lise CVM Premium conclu√≠da com sucesso!</strong><br>
                    Confira os resultados detalhados e insights avan√ßados abaixo.
                </div>
                """, unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"‚ùå Erro durante a an√°lise premium: {str(e)}")
    
    # Exibir resultados premium se dispon√≠veis
    if st.session_state.analysis_results:
        analysis_results = st.session_state.analysis_results
        
        st.markdown("### üìä Resultados da An√°lise Premium")
        
        # M√©tricas premium
        total_pontos = sum(len(r.get('pontos_atencao', [])) for r in analysis_results)
        criticos = sum(1 for r in analysis_results for p in r.get('pontos_atencao', []) if p.get('criticidade') == 'CRITICO')
        atencao = sum(1 for r in analysis_results for p in r.get('pontos_atencao', []) if p.get('criticidade') == 'ATENCAO')
        sugestoes = sum(1 for r in analysis_results for p in r.get('pontos_atencao', []) if p.get('criticidade') == 'SUGESTAO')
        
        st.markdown(f"""
        <div class="solvi-metrics">
            <div class="solvi-metric">
                <div class="solvi-metric-value">{total_pontos}</div>
                <div class="solvi-metric-label">Total de Pontos</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{criticos}</div>
                <div class="solvi-metric-label">Cr√≠ticos</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{atencao}</div>
                <div class="solvi-metric-label">Aten√ß√£o</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{sugestoes}</div>
                <div class="solvi-metric-label">Sugest√µes</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Exibir resultados detalhados premium
        for result in analysis_results:
            with st.expander(f"üìë {result.get('secao', 'Se√ß√£o n√£o identificada')}", expanded=False):
                conformidade = result.get('conformidade', 'N/A')
                if conformidade == 'CONFORME':
                    st.success(f"‚úÖ Status: {conformidade}")
                elif conformidade == 'NAO_CONFORME':
                    st.error(f"‚ùå Status: {conformidade}")
                else:
                    st.warning(f"‚ö†Ô∏è Status: {conformidade}")
                
                st.write(f"**Resumo:** {result.get('resumo', 'N/A')}")
                
                pontos = result.get('pontos_atencao', [])
                if pontos:
                    st.write("**Pontos de Aten√ß√£o:**")
                    for i, ponto in enumerate(pontos, 1):
                        criticidade = ponto.get('criticidade', 'N/A')
                        emoji = "üî¥" if criticidade == "CRITICO" else "üü°" if criticidade == "ATENCAO" else "üü¢"
                        
                        st.write(f"{emoji} **Ponto {i}:** {ponto.get('problema', 'N/A')}")
                        st.write(f"**Base legal:** {ponto.get('artigo_cvm', 'N/A')}")
                        st.write(f"**Sugest√£o:** {ponto.get('sugestao', 'N/A')}")
                        st.write("---")

def render_document_comparison():
    """Renderiza a interface premium de compara√ß√£o de documentos"""
    st.markdown("""
    <div class="solvi-card">
        <div class="solvi-card-header">
            <div class="solvi-card-icon">üìö</div>
            <h2 class="solvi-card-title">Compara√ß√£o Inteligente de Documentos</h2>
        </div>
        <p style="color: #666; font-size: 1.4rem; line-height: 1.8; font-weight: 500; font-family: 'Inter', sans-serif;">
            Compare dois documentos (PDF ou Word) com algoritmo premium de IA e identifique apenas as altera√ß√µes 
            reais de conte√∫do, ignorando mudan√ßas de formata√ß√£o e posicionamento com normaliza√ß√£o avan√ßada 
            e an√°lise sem√¢ntica inteligente.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Layout premium em colunas para upload
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üìÑ Documento de Refer√™ncia")
        arquivo_ref = st.file_uploader(
            "Escolha o arquivo de refer√™ncia",
            type=['pdf', 'docx'],
            key="ref_uploader",
            help="Este ser√° usado como base para compara√ß√£o premium"
        )
        
        if arquivo_ref:
            st.markdown(f"""
            <div class="solvi-alert success">
                ‚úÖ <strong>Arquivo carregado:</strong> {arquivo_ref.name}<br>
                üìä <strong>Tamanho:</strong> {arquivo_ref.size / 1024 / 1024:.2f} MB<br>
                üìã <strong>Tipo:</strong> {arquivo_ref.type.split('/')[-1].upper()}<br>
                üéØ <strong>Status:</strong> Pronto para an√°lise premium
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üìÑ Novo Documento")
        arquivo_novo = st.file_uploader(
            "Escolha o novo arquivo",
            type=['pdf', 'docx'],
            key="novo_uploader",
            help="Este ser√° comparado com o arquivo de refer√™ncia"
        )
        
        if arquivo_novo:
            st.markdown(f"""
            <div class="solvi-alert success">
                ‚úÖ <strong>Arquivo carregado:</strong> {arquivo_novo.name}<br>
                üìä <strong>Tamanho:</strong> {arquivo_novo.size / 1024 / 1024:.2f} MB<br>
                üìã <strong>Tipo:</strong> {arquivo_novo.type.split('/')[-1].upper()}<br>
                üöÄ <strong>An√°lise:</strong> IA avan√ßada habilitada
            </div>
            """, unsafe_allow_html=True)
    
    # Informa√ß√µes premium sobre o algoritmo com pontilhado cont√≠nuo
    if not arquivo_ref or not arquivo_novo:
        st.markdown("""
        <div class="solvi-upload">
            <div class="solvi-upload-icon">üìö</div>
            <div class="solvi-upload-text">Algoritmo Inteligente de Compara√ß√£o</div>
            <div class="solvi-upload-subtext">
                ‚úÖ Ignora mudan√ßas de posicionamento e formata√ß√£o<br>
                ‚úÖ Foca apenas em altera√ß√µes reais de conte√∫do<br>
                ‚úÖ Detecta modifica√ß√µes com alta precis√£o e IA<br>
                ‚úÖ Normaliza texto para compara√ß√£o precisa<br>
                ‚úÖ An√°lise por similaridade sem√¢ntica avan√ßada<br>
                ‚úÖ Relat√≥rios detalhados com insights premium
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    # Bot√£o de compara√ß√£o premium
    if arquivo_ref and arquivo_novo:
        # Verificar compatibilidade de tipos
        comparator = DocumentComparator()
        tipo_ref = comparator.detectar_tipo_arquivo(arquivo_ref.name)
        tipo_novo = comparator.detectar_tipo_arquivo(arquivo_novo.name)
        
        if tipo_ref != tipo_novo:
            st.markdown(f"""
            <div class="solvi-alert warning">
                ‚ö†Ô∏è <strong>Tipos diferentes detectados:</strong> {tipo_ref.upper()} vs {tipo_novo.upper()}<br>
                A compara√ß√£o premium ainda √© poss√≠vel com algoritmo adaptativo, mas pode n√£o ser ideal.
            </div>
            """, unsafe_allow_html=True)
        
        if st.button("üîç Comparar Documentos Premium", type="primary", use_container_width=True):
            with st.spinner("üîÑ Processando compara√ß√£o premium com IA..."):
                try:
                    # Extrair textos premium
                    ref_bytes = arquivo_ref.read()
                    novo_bytes = arquivo_novo.read()
                    
                    if tipo_ref == 'pdf':
                        texto_ref = comparator.extrair_texto_pdf(ref_bytes)
                    else:
                        texto_ref = comparator.extrair_texto_word(ref_bytes)
                    
                    if tipo_novo == 'pdf':
                        texto_novo = comparator.extrair_texto_pdf(novo_bytes)
                    else:
                        texto_novo = comparator.extrair_texto_word(novo_bytes)
                    
                    if not texto_ref or not texto_novo:
                        st.error("‚ùå Erro ao extrair texto dos documentos")
                        return
                    
                    # Comparar textos com algoritmo premium
                    diferencas_simples = []
                    
                    max_paginas = max(len(texto_ref), len(texto_novo))
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    for i in range(max_paginas):
                        status_text.text(f"ü§ñ Analisando com IA p√°gina/se√ß√£o {i+1} de {max_paginas}")
                        
                        ref = texto_ref[i] if i < len(texto_ref) else ""
                        novo = texto_novo[i] if i < len(texto_novo) else ""
                        
                        paragrafos_ref = comparator.dividir_em_paragrafos(ref)
                        paragrafos_novo = comparator.dividir_em_paragrafos(novo)
                        
                        alteracoes = comparator.encontrar_alteracoes_reais(paragrafos_ref, paragrafos_novo)
                        
                        if alteracoes:
                            for j, alteracao in enumerate(alteracoes):
                                tipo_mapeado = {
                                    'removido': 'Removido',
                                    'adicionado': 'Adicionado',
                                    'modificado': 'Modificado'
                                }[alteracao['tipo']]
                                
                                diferencas_simples.append({
                                    'pagina': i + 1,
                                    'paragrafo': j + 1,
                                    'tipo': tipo_mapeado,
                                    'conteudo_original': alteracao['texto_original'],
                                    'conteudo_novo': alteracao['texto_novo']
                                })
                        
                        progress_bar.progress((i + 1) / max_paginas)
                    
                    progress_bar.empty()
                    status_text.empty()
                    
                    # Salvar resultados premium
                    st.session_state.comparison_results = {
                        'diferencas': diferencas_simples,
                        'arquivo_ref': arquivo_ref.name,
                        'arquivo_novo': arquivo_novo.name
                    }
                    
                    st.markdown("""
                    <div class="solvi-alert success">
                        ‚úÖ <strong>Compara√ß√£o premium conclu√≠da com sucesso!</strong><br>
                        Confira os resultados detalhados e insights avan√ßados abaixo.
                    </div>
                    """, unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"‚ùå Erro durante a compara√ß√£o premium: {str(e)}")
    
    # Exibir resultados premium se dispon√≠veis
    if st.session_state.comparison_results:
        results = st.session_state.comparison_results
        diferencas = results['diferencas']
        
        st.markdown("### üìä Resultados da Compara√ß√£o Premium")
        
        # M√©tricas premium
        total_diferencas = len(diferencas)
        adicionados = len([d for d in diferencas if d['tipo'] == 'Adicionado'])
        removidos = len([d for d in diferencas if d['tipo'] == 'Removido'])
        modificados = len([d for d in diferencas if d['tipo'] == 'Modificado'])
        
        st.markdown(f"""
        <div class="solvi-metrics">
            <div class="solvi-metric">
                <div class="solvi-metric-value">{total_diferencas}</div>
                <div class="solvi-metric-label">Total de Altera√ß√µes</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{adicionados}</div>
                <div class="solvi-metric-label">Adicionados</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{removidos}</div>
                <div class="solvi-metric-label">Removidos</div>
            </div>
            <div class="solvi-metric">
                <div class="solvi-metric-value">{modificados}</div>
                <div class="solvi-metric-label">Modificados</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Tabela premium de diferen√ßas
        if diferencas:
            st.markdown("### üìã Detalhes das Altera√ß√µes Premium")
            df = pd.DataFrame(diferencas)
            st.dataframe(df, use_container_width=True)
        else:
            st.markdown("""
            <div class="solvi-alert success">
                ‚úÖ <strong>Nenhuma diferen√ßa encontrada!</strong><br>
                Os documentos s√£o id√™nticos em conte√∫do ap√≥s an√°lise premium com IA.
            </div>
            """, unsafe_allow_html=True)

def render_footer():
    """Renderiza o footer premium da aplica√ß√£o"""
    st.markdown("""
    <div class="solvi-footer">
        <div class="solvi-footer-content">
            <img src="https://static.wixstatic.com/media/b5b170_1e07cf7f7f82492a9808f9ae7f038596~mv2.png/v1/crop/x_0,y_0,w_2742,h_1106/fill/w_92,h_37,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/Logotipo%20Solv%C3%AD_edited_edited.png" alt="Solv√≠ Logo" class="solvi-footer-logo">
            <p style="margin: 3rem 0 1.5rem 0; font-size: 1.6rem; font-weight: 800; font-family: 'Poppins', sans-serif;">
                üå± Plataforma Solv√≠ - Solu√ß√µes Inteligentes Premium para An√°lise de Documentos
            </p>
            <p style="margin: 0; opacity: 0.95; font-size: 1.2rem; font-weight: 600; font-family: 'Inter', sans-serif;">
                Desenvolvido com ‚ù§Ô∏è para sustentabilidade e inova√ß√£o ‚Ä¢ Solu√ß√µes para a vida ‚Ä¢ Tecnologia Premium
            </p>
        </div>
    </div>
    """, unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal masterpiece da aplica√ß√£o"""
    # Inicializar session state premium
    init_session_state()
    
    # Renderizar header masterpiece
    render_header()
    
    # Renderizar se√ß√£o inspiracional premium
    render_inspiration_section()
    
    # Renderizar navega√ß√£o premium
    render_navigation()
    
    # Renderizar conte√∫do premium baseado na aba selecionada
    if st.session_state.current_tab == 'cvm':
        render_cvm_analysis()
    else:
        render_document_comparison()
    
    # Renderizar footer premium
    render_footer()

if __name__ == "__main__":
    main()
