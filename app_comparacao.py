"""
üìö Document Comparator - Aplica√ß√£o Streamlit
Compara dois arquivos (PDF ou Word) e gera relat√≥rio de diferen√ßas
Vers√£o que ignora deslocamentos e foca apenas em altera√ß√µes reais de conte√∫do
"""

import streamlit as st
import fitz  # PyMuPDF
import difflib
import pandas as pd
import io
from datetime import datetime
import base64
from typing import List, Tuple, Dict, Optional, Set
import logging
from pathlib import Path
import tempfile
import os
import re

# Importa√ß√µes condicionais para Word
try:
    from docx import Document
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Comparador de PDFs - Solvi",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para destacar filtros e par√°grafos
st.markdown("""
<style>
    /* Estilo para o header com logo */
    .header-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
        padding: 20px 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    
    .header-text {
        color: white;
        flex: 1;
    }
    
    .header-title {
        font-size: 2.5em;
        font-weight: bold;
        margin: 0;
        background: linear-gradient(45deg, #ffffff, #e0e7ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .header-subtitle {
        font-size: 1.1em;
        margin: 5px 0 0 0;
        opacity: 0.9;
    }
    
    .logo-container {
        background: white;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .logo-container img {
        max-height: 60px;
        max-width: 150px;
        object-fit: contain;
    }
    
    /* Estilo para filtros em destaque */
    .filtros-container {
        background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
        color: white;
        padding: 20px;
        border-radius: 10px;
        margin: 20px 0;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .filtros-title {
        font-size: 1.3em;
        font-weight: bold;
        margin-bottom: 15px;
        text-align: center;
    }
    
    .filtros-content {
        background: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 8px;
        backdrop-filter: blur(10px);
    }
    
    /* Estilo para m√©tricas */
    .metric-container {
        background: white;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    
    .metric-value {
        font-size: 2em;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 5px;
    }
    
    .metric-label {
        color: #666;
        font-size: 0.9em;
    }
    
    /* Estilo para par√°grafos */
    .paragrafo-container {
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin: 15px 0;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .paragrafo-header {
        background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
        color: white;
        padding: 12px 20px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .paragrafo-content {
        padding: 20px;
        font-family: 'Georgia', 'Times New Roman', serif;
        font-size: 14px;
        line-height: 1.8;
        background: #fafafa;
    }
    
    .paragrafo-numero {
        display: inline-block;
        width: 60px;
        color: #666;
        font-weight: bold;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        margin-right: 15px;
        text-align: right;
    }
    
    .paragrafo-texto {
        display: inline;
    }
    
    .paragrafo-adicionado {
        background-color: #e8f5e8;
        border-left: 4px solid #4caf50;
        color: #2e7d32;
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 4px;
    }
    
    .paragrafo-removido {
        background-color: #ffebee;
        border-left: 4px solid #f44336;
        color: #c62828;
        text-decoration: line-through;
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 4px;
    }
    
    .paragrafo-modificado {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 4px;
    }
    
    .paragrafo-normal {
        background-color: #f9f9f9;
        border-left: 4px solid #e0e0e0;
        color: #555;
        padding: 10px 15px;
        margin: 8px 0;
        border-radius: 4px;
    }
    
    .filtro-info {
        background: #e3f2fd;
        border: 1px solid #2196f3;
        border-radius: 6px;
        padding: 10px 15px;
        margin: 10px 0;
        color: #1976d2;
        font-size: 0.9em;
    }
    
    .algoritmo-info {
        background: #f3e5f5;
        border: 1px solid #9c27b0;
        border-radius: 6px;
        padding: 15px;
        margin: 15px 0;
        color: #7b1fa2;
        font-size: 0.9em;
    }
    
    /* Responsividade para mobile */
    @media (max-width: 768px) {
        .header-container {
            flex-direction: column;
            text-align: center;
            gap: 20px;
        }
        
        .header-title {
            font-size: 2em;
        }
        
        .logo-container {
            order: -1;
        }
    }
</style>
""", unsafe_allow_html=True)

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DocumentComparator:
    """Classe principal para compara√ß√£o de documentos (PDF e Word)"""
    
    def __init__(self):
        self.texto_ref = []
        self.texto_novo = []
        self.diferencas = []
        self.diferencas_detalhadas = []
        self.tipo_ref = None
        self.tipo_novo = None
        
    def detectar_tipo_arquivo(self, nome_arquivo: str) -> str:
        """Detecta o tipo do arquivo baseado na extens√£o"""
        extensao = Path(nome_arquivo).suffix.lower()
        if extensao == '.pdf':
            return 'pdf'
        elif extensao in ['.docx', '.doc']:
            return 'word'
        else:
            return 'desconhecido'
    
    def validar_arquivo(self, arquivo_bytes: bytes, nome_arquivo: str) -> bool:
        """Valida se o arquivo √© v√°lido baseado no tipo"""
        tipo = self.detectar_tipo_arquivo(nome_arquivo)
        
        try:
            if tipo == 'pdf':
                doc = fitz.open(stream=arquivo_bytes, filetype="pdf")
                if doc.page_count == 0:
                    st.error(f"‚ùå O arquivo PDF '{nome_arquivo}' n√£o cont√©m p√°ginas.")
                    return False
                doc.close()
                return True
                
            elif tipo == 'word':
                if not DOCX_AVAILABLE:
                    st.error("‚ùå Biblioteca python-docx n√£o est√° dispon√≠vel. Instale com: pip install python-docx")
                    return False
                
                # Salvar temporariamente para validar
                with tempfile.NamedTemporaryFile(delete=False, suffix='.docx') as tmp_file:
                    tmp_file.write(arquivo_bytes)
                    tmp_path = tmp_file.name
                
                try:
                    doc = Document(tmp_path)
                    # Verificar se tem pelo menos um par√°grafo
                    if len(doc.paragraphs) == 0:
                        st.error(f"‚ùå O arquivo Word '{nome_arquivo}' n√£o cont√©m texto.")
                        return False
                    return True
                except Exception as e:
                    st.error(f"‚ùå Erro ao abrir arquivo Word '{nome_arquivo}': {str(e)}")
                    return False
                finally:
                    # Limpar arquivo tempor√°rio
                    try:
                        os.unlink(tmp_path)
                    except:
                        pass
            else:
                st.error(f"‚ùå Tipo de arquivo n√£o suportado: {nome_arquivo}")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Erro ao validar '{nome_arquivo}': {str(e)}")
            return False
    
    def extrair_texto_pdf(self, pdf_bytes: bytes) -> List[str]:
        """Extrai texto de cada p√°gina do PDF"""
        try:
            doc = fitz.open(stream=pdf_bytes, filetype="pdf")
            textos = []
            
            total_paginas = doc.page_count
            
            for i, pagina in enumerate(doc):
                texto = pagina.get_text()
                textos.append(texto)
            
            doc.close()
            return textos
            
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do PDF: {str(e)}")
            return []
    
    def extrair_texto_word(self, word_bytes: bytes) -> List[str]:
        """Extrai texto do documento Word (simula p√°ginas por se√ß√µes)"""
        try:
            # Salvar temporariamente para processar
            with tempfile.NamedTemporaryFile(delete=False, suffix='.docx') as tmp_file:
                tmp_file.write(word_bytes)
                tmp_path = tmp_file.name
            
            try:
                doc = Document(tmp_path)
                
                # Para Word, vamos simular "p√°ginas" agrupando par√°grafos
                # Cada "p√°gina" ter√° aproximadamente 50 par√°grafos ou quebras de se√ß√£o
                textos = []
                texto_atual = ""
                contador_paragrafos = 0
                
                for paragrafo in doc.paragraphs:
                    texto_atual += paragrafo.text + "\n"
                    contador_paragrafos += 1
                    
                    # Criar nova "p√°gina" a cada 50 par√°grafos ou quebra de se√ß√£o
                    if contador_paragrafos >= 50 or "page-break" in paragrafo.text.lower():
                        if texto_atual.strip():
                            textos.append(texto_atual)
                            texto_atual = ""
                            contador_paragrafos = 0
                
                # Adicionar √∫ltimo texto se houver
                if texto_atual.strip():
                    textos.append(texto_atual)
                
                # Se n√£o h√° texto, criar pelo menos uma "p√°gina" vazia
                if not textos:
                    textos = [""]
                
                return textos
                
            finally:
                # Limpar arquivo tempor√°rio
                try:
                    os.unlink(tmp_path)
                except:
                    pass
                    
        except Exception as e:
            st.error(f"‚ùå Erro ao extrair texto do Word: {str(e)}")
            return []
    
    def extrair_texto_por_pagina(self, arquivo_bytes: bytes, nome_arquivo: str) -> List[str]:
        """Extrai texto baseado no tipo do arquivo"""
        tipo = self.detectar_tipo_arquivo(nome_arquivo)
        
        progress_bar = st.progress(0)
        
        try:
            if tipo == 'pdf':
                st.info("üìñ Extraindo texto do PDF...")
                textos = self.extrair_texto_pdf(arquivo_bytes)
            elif tipo == 'word':
                st.info("üìñ Extraindo texto do documento Word...")
                textos = self.extrair_texto_word(arquivo_bytes)
            else:
                st.error(f"‚ùå Tipo de arquivo n√£o suportado: {tipo}")
                return []
            
            progress_bar.progress(1.0)
            progress_bar.empty()
            return textos
            
        except Exception as e:
            progress_bar.empty()
            st.error(f"‚ùå Erro ao extrair texto: {str(e)}")
            return []
    
    def normalizar_texto(self, texto: str) -> str:
        """Normaliza o texto removendo varia√ß√µes que n√£o s√£o altera√ß√µes reais"""
        # Remover espa√ßos extras e quebras de linha desnecess√°rias
        texto = re.sub(r'\s+', ' ', texto.strip())
        
        # Remover caracteres de controle e formata√ß√£o
        texto = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', texto)
        
        # Normalizar pontua√ß√£o (remover espa√ßos antes de pontos, v√≠rgulas, etc.)
        texto = re.sub(r'\s+([,.;:!?])', r'\1', texto)
        
        # Normalizar aspas e caracteres especiais - CORRIGIDO
        texto = re.sub(r'["""]', '"', texto)
        texto = re.sub(r"[''']", "'", texto)
        texto = re.sub(r'[‚Äì‚Äî]', '-', texto)
        
        return texto
    
    def dividir_em_paragrafos(self, texto: str) -> List[str]:
        """Divide o texto em par√°grafos de forma inteligente"""
        # Normalizar o texto primeiro
        texto = self.normalizar_texto(texto)
        
        # Dividir por quebras de linha duplas primeiro (par√°grafos naturais)
        paragrafos_brutos = re.split(r'\n\s*\n', texto)
        paragrafos = []
        
        for paragrafo in paragrafos_brutos:
            paragrafo = paragrafo.strip()
            if paragrafo:
                # Se o par√°grafo for muito longo (mais de 500 caracteres), dividir por frases
                if len(paragrafo) > 500:
                    # Dividir por pontos finais, mas preservar n√∫meros decimais
                    frases = re.split(r'(?<!\d)\.(?!\d)\s+', paragrafo)
                    for frase in frases:
                        frase = self.normalizar_texto(frase.strip())
                        if frase and len(frase) > 10:  # Ignorar frases muito curtas
                            paragrafos.append(frase)
                else:
                    paragrafo_normalizado = self.normalizar_texto(paragrafo)
                    if paragrafo_normalizado and len(paragrafo_normalizado) > 10:
                        paragrafos.append(paragrafo_normalizado)
        
        return paragrafos
    
    def calcular_similaridade(self, texto1: str, texto2: str) -> float:
        """Calcula a similaridade entre dois textos (0.0 a 1.0)"""
        if not texto1 and not texto2:
            return 1.0
        if not texto1 or not texto2:
            return 0.0
        
        # Normalizar ambos os textos
        texto1_norm = self.normalizar_texto(texto1)
        texto2_norm = self.normalizar_texto(texto2)
        
        # Usar SequenceMatcher para calcular similaridade
        matcher = difflib.SequenceMatcher(None, texto1_norm, texto2_norm)
        return matcher.ratio()
    
    def encontrar_alteracoes_reais(self, paragrafos_ref: List[str], paragrafos_novo: List[str]) -> List[Dict]:
        """Encontra apenas altera√ß√µes reais de conte√∫do, ignorando deslocamentos"""
        alteracoes = []
        
        # Criar conjuntos de par√°grafos √∫nicos para compara√ß√£o r√°pida
        set_ref = set(paragrafos_ref)
        set_novo = set(paragrafos_novo)
        
        # Encontrar par√°grafos removidos (existem na refer√™ncia mas n√£o no novo)
        paragrafos_removidos = set_ref - set_novo
        
        # Encontrar par√°grafos adicionados (existem no novo mas n√£o na refer√™ncia)
        paragrafos_adicionados = set_novo - set_ref
        
        # Para par√°grafos modificados, precisamos fazer uma an√°lise mais detalhada
        paragrafos_modificados = []
        
        # Verificar se h√° par√°grafos similares que podem ter sido modificados
        for p_ref in paragrafos_removidos.copy():
            melhor_match = None
            melhor_similaridade = 0.0
            
            for p_novo in paragrafos_adicionados.copy():
                similaridade = self.calcular_similaridade(p_ref, p_novo)
                
                # Se a similaridade for alta (>0.6), considerar como modifica√ß√£o
                if similaridade > 0.6 and similaridade > melhor_similaridade:
                    melhor_match = p_novo
                    melhor_similaridade = similaridade
            
            # Se encontrou um match, √© uma modifica√ß√£o, n√£o remo√ß√£o + adi√ß√£o
            if melhor_match and melhor_similaridade > 0.6:
                paragrafos_modificados.append({
                    'original': p_ref,
                    'novo': melhor_match,
                    'similaridade': melhor_similaridade
                })
                paragrafos_removidos.discard(p_ref)
                paragrafos_adicionados.discard(melhor_match)
        
        # Adicionar remo√ß√µes reais
        for paragrafo in paragrafos_removidos:
            alteracoes.append({
                'tipo': 'removido',
                'texto': paragrafo,
                'texto_original': paragrafo,
                'texto_novo': ''
            })
        
        # Adicionar adi√ß√µes reais
        for paragrafo in paragrafos_adicionados:
            alteracoes.append({
                'tipo': 'adicionado',
                'texto': paragrafo,
                'texto_original': '',
                'texto_novo': paragrafo
            })
        
        # Adicionar modifica√ß√µes reais
        for mod in paragrafos_modificados:
            alteracoes.append({
                'tipo': 'modificado',
                'texto': f"ANTES: {mod['original']}\nDEPOIS: {mod['novo']}",
                'texto_original': mod['original'],
                'texto_novo': mod['novo'],
                'similaridade': mod['similaridade']
            })
        
        return alteracoes
    
    def comparar_textos_por_conteudo(self, texto_ref: List[str], texto_novo: List[str]) -> Tuple[List[Dict], List[Dict]]:
        """Compara textos focando apenas em altera√ß√µes reais de conte√∫do"""
        diferencas_simples = []
        diferencas_detalhadas = []
        
        max_paginas = max(len(texto_ref), len(texto_novo))
        progress_bar = st.progress(0)
        
        for i in range(max_paginas):
            # Garantir que ambos os textos existam
            ref = texto_ref[i] if i < len(texto_ref) else ""
            novo = texto_novo[i] if i < len(texto_novo) else ""
            
            # Dividir em par√°grafos
            paragrafos_ref = self.dividir_em_paragrafos(ref)
            paragrafos_novo = self.dividir_em_paragrafos(novo)
            
            # Encontrar altera√ß√µes reais (n√£o deslocamentos)
            alteracoes = self.encontrar_alteracoes_reais(paragrafos_ref, paragrafos_novo)
            
            if alteracoes:
                # Processar altera√ß√µes para a tabela simples
                paragrafo_atual = 1
                paragrafos_processados = []
                
                for alteracao in alteracoes:
                    # Adicionar √† tabela simples
                    tipo_mapeado = {
                        'removido': 'Removido',
                        'adicionado': 'Adicionado',
                        'modificado': 'Modificado'
                    }[alteracao['tipo']]
                    
                    diferencas_simples.append({
                        'pagina': i + 1,
                        'paragrafo': paragrafo_atual,
                        'tipo': tipo_mapeado,
                        'conteudo_original': alteracao['texto_original'],
                        'conteudo_novo': alteracao['texto_novo']
                    })
                    
                    # Adicionar aos par√°grafos processados para visualiza√ß√£o
                    paragrafos_processados.append({
                        'numero': paragrafo_atual,
                        'texto': alteracao['texto'],
                        'tipo': alteracao['tipo']
                    })
                    
                    paragrafo_atual += 1
                
                # Adicionar par√°grafos inalterados para contexto (limitado)
                paragrafos_inalterados = set(paragrafos_ref) & set(paragrafos_novo)
                contexto_adicionado = 0
                
                for paragrafo in list(paragrafos_inalterados)[:3]:  # M√°ximo 3 para contexto
                    paragrafos_processados.append({
                        'numero': paragrafo_atual + contexto_adicionado,
                        'texto': paragrafo,
                        'tipo': 'normal'
                    })
                    contexto_adicionado += 1
                
                if paragrafos_processados:
                    diferencas_detalhadas.append({
                        'pagina': i + 1,
                        'paragrafos': paragrafos_processados,
                        'total_paragrafos_ref': len(paragrafos_ref),
                        'total_paragrafos_novo': len(paragrafos_novo),
                        'total_alteracoes': len(alteracoes),
                        'total_contexto': contexto_adicionado
                    })
            
            progress_bar.progress((i + 1) / max_paginas)
        
        progress_bar.empty()
        return diferencas_simples, diferencas_detalhadas

def exibir_diferencas_por_paragrafos(diferencas_detalhadas: List[Dict], tipos_filtro: List[str] = None, paginas_filtro: List[int] = None):
    """Exibe as diferen√ßas por par√°grafos com filtros aplicados"""
    if not diferencas_detalhadas:
        st.success("‚úÖ Nenhuma diferen√ßa de conte√∫do encontrada!")
        st.markdown("""
        <div class="algoritmo-info">
            üéØ <strong>Algoritmo Inteligente:</strong> Este comparador ignora mudan√ßas de posicionamento e formata√ß√£o, 
            focando apenas em altera√ß√µes reais de conte√∫do. Par√°grafos que apenas mudaram de posi√ß√£o n√£o s√£o considerados altera√ß√µes.
        </div>
        """, unsafe_allow_html=True)
        return
    
    # Aplicar filtros
    diferencas_filtradas = []
    
    for diff_detail in diferencas_detalhadas:
        # Filtrar por p√°gina
        if paginas_filtro and diff_detail['pagina'] not in paginas_filtro:
            continue
        
        # Filtrar par√°grafos por tipo
        paragrafos_filtrados = []
        for paragrafo in diff_detail['paragrafos']:
            tipo_mapeado = {
                'adicionado': 'Adicionado',
                'removido': 'Removido', 
                'modificado': 'Modificado',
                'normal': 'Normal'
            }.get(paragrafo['tipo'], paragrafo['tipo'])
            
            if not tipos_filtro or any(tipo in tipo_mapeado for tipo in tipos_filtro):
                paragrafos_filtrados.append(paragrafo)
        
        if paragrafos_filtrados:
            diff_filtrada = diff_detail.copy()
            diff_filtrada['paragrafos'] = paragrafos_filtrados
            diff_filtrada['total_alteracoes_filtradas'] = len([p for p in paragrafos_filtrados if p['tipo'] != 'normal'])
            diferencas_filtradas.append(diff_filtrada)
    
    if not diferencas_filtradas:
        st.info("üîç Nenhuma diferen√ßa encontrada com os filtros aplicados.")
        return
    
    st.subheader("üîç Compara√ß√£o Visual por P√°gina e Par√°grafo")
    
    # Informa√ß√£o sobre o algoritmo
    st.markdown("""
    <div class="algoritmo-info">
        üéØ <strong>Algoritmo Inteligente:</strong> Este comparador ignora mudan√ßas de posicionamento e formata√ß√£o, 
        focando apenas em altera√ß√µes reais de conte√∫do. Par√°grafos similares (>60% de similaridade) s√£o considerados modifica√ß√µes, 
        n√£o remo√ß√µes + adi√ß√µes separadas.
    </div>
    """, unsafe_allow_html=True)
    
    # Legenda
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("üü¢ **Verde:** Conte√∫do Adicionado")
    with col2:
        st.markdown("üî¥ **Vermelho:** Conte√∫do Removido")
    with col3:
        st.markdown("üü° **Amarelo:** Conte√∫do Modificado")
    
    # Informa√ß√£o sobre filtros aplicados
    if tipos_filtro or paginas_filtro:
        filtros_ativos = []
        if tipos_filtro:
            filtros_ativos.append(f"Tipos: {', '.join(tipos_filtro)}")
        if paginas_filtro:
            filtros_ativos.append(f"P√°ginas: {', '.join(map(str, paginas_filtro))}")
        
        st.markdown(f"""
        <div class="filtro-info">
            üîç <strong>Filtros aplicados:</strong> {' | '.join(filtros_ativos)}
        </div>
        """, unsafe_allow_html=True)
    
    st.divider()
    
    # Exibir cada p√°gina com diferen√ßas
    for diff_detail in diferencas_filtradas:
        st.markdown(f"""
        <div class="paragrafo-container">
            <div class="paragrafo-header">
                <span>üî∏ P√°gina/Se√ß√£o {diff_detail['pagina']}</span>
                <span>{diff_detail.get('total_alteracoes_filtradas', diff_detail['total_alteracoes'])} altera√ß√£o(√µes) de conte√∫do | {diff_detail.get('total_contexto', 0)} par√°grafo(s) de contexto</span>
            </div>
            <div class="paragrafo-content">
        """, unsafe_allow_html=True)
        
        # Exibir par√°grafos
        for paragrafo in diff_detail['paragrafos']:
            tipo_classe = f"paragrafo-{paragrafo['tipo']}"
            
            # Para modifica√ß√µes, mostrar antes e depois
            if paragrafo['tipo'] == 'modificado' and '\nDEPOIS:' in paragrafo['texto']:
                partes = paragrafo['texto'].split('\nDEPOIS:')
                antes = partes[0].replace('ANTES:', '').strip()
                depois = partes[1].strip()
                
                st.markdown(f"""
                    <div class="{tipo_classe}">
                        <span class="paragrafo-numero">¬ß{paragrafo['numero']}</span>
                        <div class="paragrafo-texto">
                            <strong>ANTES:</strong><br>{antes}<br><br>
                            <strong>DEPOIS:</strong><br>{depois}
                        </div>
                    </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                    <div class="{tipo_classe}">
                        <span class="paragrafo-numero">¬ß{paragrafo['numero']}</span>
                        <span class="paragrafo-texto">{paragrafo['texto']}</span>
                    </div>
                """, unsafe_allow_html=True)
        
        st.markdown("</div></div>", unsafe_allow_html=True)
        st.markdown("<br>", unsafe_allow_html=True)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # T√≠tulo e descri√ß√£o
    st.title("üìö Comparador de PDFs - Solvi")
    st.markdown("**Compare dois documentos (PDF ou Word) e identifique apenas as altera√ß√µes.**")
    
    # Verificar se python-docx est√° dispon√≠vel
    if not DOCX_AVAILABLE:
        st.warning("‚ö†Ô∏è Para suporte completo a documentos Word, instale: `pip install python-docx`")
    
    # Sidebar com informa√ß√µes
    with st.sidebar:
        st.header("‚ÑπÔ∏è Informa√ß√µes")
        st.markdown("""
        **Como usar:**
        1. Fa√ßa upload do documento de refer√™ncia
        2. Fa√ßa upload do novo documento
        3. Clique em 'Comparar Documentos'
        4. Visualize apenas as altera√ß√µes reais de conte√∫do
        5. Use os filtros para an√°lise espec√≠fica
        
        **Formatos suportados:**
        - PDF (.pdf)
        - Word (.docx)
        
        **Algoritmo Inteligente:**
        - ‚úÖ Ignora mudan√ßas de posicionamento
        - ‚úÖ Ignora altera√ß√µes de formata√ß√£o
        - ‚úÖ Foca apenas em conte√∫do real
        - ‚úÖ Detecta modifica√ß√µes (n√£o remo√ß√£o + adi√ß√£o)
        - ‚úÖ Normaliza texto para compara√ß√£o precisa
        
        **Dicas:**
        - Funciona melhor com documentos de texto
        - Par√°grafos s√£o normalizados automaticamente
        - Similaridade >60% = modifica√ß√£o, n√£o nova altera√ß√£o
        """)
    
    # Inicializar o comparador
    if 'comparador' not in st.session_state:
        st.session_state.comparador = DocumentComparator()
    
    # Layout em colunas para upload
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìÑ Documento de Refer√™ncia")
        arquivo_ref = st.file_uploader(
            "Escolha o arquivo de refer√™ncia",
            type=['pdf', 'docx'] if DOCX_AVAILABLE else ['pdf'],
            key="ref_uploader",
            help="Este ser√° usado como base para compara√ß√£o"
        )
        
        if arquivo_ref:
            tipo_ref = st.session_state.comparador.detectar_tipo_arquivo(arquivo_ref.name)
            st.success(f"‚úÖ Arquivo carregado: {arquivo_ref.name}")
            st.info(f"üìä Tamanho: {arquivo_ref.size / 1024 / 1024:.2f} MB")
            st.info(f"üìã Tipo: {tipo_ref.upper()}")
    
    with col2:
        st.subheader("üìÑ Novo Documento")
        arquivo_novo = st.file_uploader(
            "Escolha o novo arquivo",
            type=['pdf', 'docx'] if DOCX_AVAILABLE else ['pdf'],
            key="novo_uploader",
            help="Este ser√° comparado com o arquivo de refer√™ncia"
        )
        
        if arquivo_novo:
            tipo_novo = st.session_state.comparador.detectar_tipo_arquivo(arquivo_novo.name)
            st.success(f"‚úÖ Arquivo carregado: {arquivo_novo.name}")
            st.info(f"üìä Tamanho: {arquivo_novo.size / 1024 / 1024:.2f} MB")
            st.info(f"üìã Tipo: {tipo_novo.upper()}")
    
    # Bot√£o de compara√ß√£o
    if arquivo_ref and arquivo_novo:
        # Verificar se os tipos s√£o compat√≠veis
        tipo_ref = st.session_state.comparador.detectar_tipo_arquivo(arquivo_ref.name)
        tipo_novo = st.session_state.comparador.detectar_tipo_arquivo(arquivo_novo.name)
        
        if tipo_ref != tipo_novo:
            st.warning(f"‚ö†Ô∏è Aten√ß√£o: Voc√™ est√° comparando arquivos de tipos diferentes ({tipo_ref.upper()} vs {tipo_novo.upper()}). A compara√ß√£o ainda √© poss√≠vel, mas pode n√£o ser ideal.")
        
        if st.button("üîç Comparar Documentos", type="primary", use_container_width=True):
            
            with st.spinner("üîÑ Processando arquivos..."):
                # Validar arquivos
                ref_bytes = arquivo_ref.read()
                novo_bytes = arquivo_novo.read()
                
                if not st.session_state.comparador.validar_arquivo(ref_bytes, arquivo_ref.name):
                    st.stop()
                
                if not st.session_state.comparador.validar_arquivo(novo_bytes, arquivo_novo.name):
                    st.stop()
                
                # Extrair textos
                texto_ref = st.session_state.comparador.extrair_texto_por_pagina(ref_bytes, arquivo_ref.name)
                texto_novo = st.session_state.comparador.extrair_texto_por_pagina(novo_bytes, arquivo_novo.name)
                
                if not texto_ref or not texto_novo:
                    st.error("‚ùå Erro ao extrair texto dos documentos")
                    st.stop()
                
                # Comparar textos focando apenas em conte√∫do
                st.info("üîç Analisando altera√ß√µes reais de conte√∫do...")
                diferencas_simples, diferencas_detalhadas = st.session_state.comparador.comparar_textos_por_conteudo(texto_ref, texto_novo)
                
                # Armazenar resultados no session state
                st.session_state.diferencas = diferencas_simples
                st.session_state.diferencas_detalhadas = diferencas_detalhadas
                st.session_state.arquivo_ref_nome = arquivo_ref.name
                st.session_state.arquivo_novo_nome = arquivo_novo.name
                st.session_state.tipo_ref = tipo_ref
                st.session_state.tipo_novo = tipo_novo
    
    # Exibir resultados se existirem
    if 'diferencas' in st.session_state and 'diferencas_detalhadas' in st.session_state:
        diferencas = st.session_state.diferencas
        diferencas_detalhadas = st.session_state.diferencas_detalhadas
        
        st.divider()
        
        # Resumo dos resultados com layout melhorado
        st.subheader("üìä Resumo da An√°lise")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{len(diferencas)}</div>
                <div class="metric-label">Altera√ß√µes Reais</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            paginas_afetadas = len(set(d['pagina'] for d in diferencas)) if diferencas else 0
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{paginas_afetadas}</div>
                <div class="metric-label">P√°ginas/Se√ß√µes Afetadas</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            tipos_mudanca = len(set(d['tipo'] for d in diferencas)) if diferencas else 0
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value">{tipos_mudanca}</div>
                <div class="metric-label">Tipos de Mudan√ßa</div>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            compatibilidade = "‚úÖ Mesmos tipos" if st.session_state.tipo_ref == st.session_state.tipo_novo else "‚ö†Ô∏è Tipos diferentes"
            st.markdown(f"""
            <div class="metric-container">
                <div class="metric-value" style="font-size: 1.2em;">{compatibilidade}</div>
                <div class="metric-label">Compatibilidade</div>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        if diferencas:
            # Filtros Avan√ßados em destaque
            st.markdown("""
            <div class="filtros-container">
                <div class="filtros-title">üîç Filtros Avan√ßados</div>
                <div class="filtros-content">
                    <p style="margin-bottom: 15px; text-align: center;">Use os filtros abaixo para analisar tipos espec√≠ficos de altera√ß√µes reais de conte√∫do</p>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Converter para DataFrame para melhor visualiza√ß√£o
            df_diferencas = pd.DataFrame(diferencas)
            
            col1, col2 = st.columns(2)
            
            with col1:
                tipos_selecionados = st.multiselect(
                    "üè∑Ô∏è Filtrar por tipo de mudan√ßa:",
                    options=df_diferencas['tipo'].unique(),
                    default=df_diferencas['tipo'].unique(),
                    help="Selecione os tipos de altera√ß√£o que deseja visualizar"
                )
            
            with col2:
                paginas_selecionadas = st.multiselect(
                    "üìÑ Filtrar por p√°gina/se√ß√£o:",
                    options=sorted(df_diferencas['pagina'].unique()),
                    default=sorted(df_diferencas['pagina'].unique()),
                    help="Selecione as p√°ginas/se√ß√µes que deseja analisar"
                )
            
            # Aplicar filtros
            df_filtrado = df_diferencas[
                (df_diferencas['tipo'].isin(tipos_selecionados)) &
                (df_diferencas['pagina'].isin(paginas_selecionadas))
            ]
            
            # Exibir compara√ß√£o visual com filtros aplicados
            exibir_diferencas_por_paragrafos(diferencas_detalhadas, tipos_selecionados, paginas_selecionadas)
            
            # Tabela Resumo das Diferen√ßas (retr√°til)
            with st.expander("üìã Tabela Resumo das Diferen√ßas", expanded=False):
                if len(df_filtrado) != len(df_diferencas):
                    st.info(f"üìä Mostrando {len(df_filtrado)} de {len(df_diferencas)} diferen√ßas (filtros aplicados)")
                
                # Configurar exibi√ß√£o da tabela
                st.dataframe(
                    df_filtrado,
                    use_container_width=True,
                    column_config={
                        "pagina": st.column_config.NumberColumn("P√°gina/Se√ß√£o", format="%d"),
                        "paragrafo": st.column_config.NumberColumn("Par√°grafo", format="%d"),
                        "tipo": st.column_config.TextColumn("Tipo"),
                        "conteudo_original": st.column_config.TextColumn("Conte√∫do Original"),
                        "conteudo_novo": st.column_config.TextColumn("Conte√∫do Novo")
                    }
                )
                
                # Estat√≠sticas dos dados filtrados
                if len(df_filtrado) > 0:
                    st.markdown("### üìà Estat√≠sticas dos Dados Filtrados")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("Total de Altera√ß√µes", len(df_filtrado))
                    
                    with col2:
                        paginas_filtradas = len(df_filtrado['pagina'].unique())
                        st.metric("P√°ginas Afetadas", paginas_filtradas)
                    
                    with col3:
                        tipos_filtrados = len(df_filtrado['tipo'].unique())
                        st.metric("Tipos de Mudan√ßa", tipos_filtrados)
        else:
            # Exibir compara√ß√£o visual mesmo sem diferen√ßas
            exibir_diferencas_por_paragrafos(diferencas_detalhadas)
        
        if not diferencas:
            st.balloons()

if __name__ == "__main__":
    main()

